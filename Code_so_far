#include<bits/stdc++.h>
using namespace std;

struct node{
    int data;
    vector< node* > children;

    node (int d) {
        this -> data = d;
        children.clear();
    }
};
void levelorderzz(node *temp){
    stack<node*> ms;
    stack<node*> cs;
    stack<node*> n;
    ms.push(temp);
    int level=1;
    while(ms.size()>0){
        temp=ms.top();
        ms.pop();
        cout<<temp->data<<" ";
        if(level%2==1){
           for(auto child:temp->children)
           cs.push(child);
            
        }
        else{
            
            
        }
        if(ms.empty()){
            ms=cs;
            cs=n;
            cout<<endl;
            level++;
        }
    }
}
void levelorderlw(node *temp){
queue<node*> q;
queue<node*> cq;
queue<node*> reference_to_null;
q.push(temp);
while(q.size()>0){
temp=q.front();
q.pop();
cout<<temp->data<<" ";
for(auto child:temp->children)
cq.push(child);
if(q.empty()){
    q=cq;
    cq=reference_to_null;
    cout<<endl;
}
}

}
void display(node *temp){
    if(!temp) return;
    cout << temp->data << '\n';
    string str = to_string(temp->data) + "->";
    for(auto child : temp->children){
        str += to_string(child->data) + ",";
    }
    // str += ".";
    cout << str << endl;
    for(auto child : temp->children)
        display(child);
}

int main(){
    vector<int> arr({10,20,50,-1,60,-1,-1,30,70,-1,80,110,-1,120,-1,-1,90,-1,-1,40,100,-1,-1});
    node* root = NULL;
    stack<node*> st;
    for(int i = 0; i < arr.size(); i++)
    {
        if(arr[i]==-1)
            st.pop();
        else{
            node* t = new node(arr[i]);
            if(st.size() != 0)
                st.top()->children.push_back(t);
            else
                root=t;
            st.push(t);
        }
    }
   // display(root);
 //  levelorderlw(root);
   levelorderzz(root);
    return 0;
}
