the distance b/w the deepest and 2nd deepest node .....
it's not necessary always it's path go from root
#include<bits/stdc++.h>
using namespace std;

struct node{
    int data;
    vector< node* > children;

    node (int d) {
        this -> data = d;
        children.clear();
    }
};
static int diameter=0;
static int calculate1stand2nddeepest(node *temp){
    int dc=-1;
    int sdc=-1;
    for(auto child:temp->children){
        int ch=calculate1stand2nddeepest(child);
        if(ch>dc){
            sdc=dc;
            dc=ch;
        }
        else if(ch>sdc){
            sdc=ch;
        }
    }
    int cmp=dc+sdc+2;
   diameter=max(cmp,diameter);
   return dc+1;
}
int main(){
   // vector<int> arr({10,20,50,-1,60,-1,-1,30,70,-1,80,110,-1,120,-1,-1,90,-1,-1,40,100,-1,-1});
  int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++)
    cin>>arr[i];
    node* root = NULL;
    stack<node*> st;
    for(int i = 0; i < n; i++)
    {
        if(arr[i]==-1)
            st.pop();
        else{
            node* t = new node(arr[i]);
            if(st.size() != 0)
                st.top()->children.push_back(t);
            else
                root=t;
            st.push(t);
        }
    }
calculate1stand2nddeepest(root);
cout<<diameter<<endl;

    
}
