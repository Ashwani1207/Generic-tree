#include<bits/stdc++.h>
using namespace std;

struct node{
    int data;
    vector< node* > children;

    node (int d) {
        this -> data = d;
        children.clear();
    }
};
static int fl=INT_MIN;
static int cl=INT_MAX;
void ceilfloor(node *temp,int val){
    if(temp->data<val&&temp->data>fl){
        fl=temp->data;
    }
    if(temp->data>val&&temp->data<cl){
        cl=temp->data;
    }for(auto child:temp->children){
        ceilfloor(child,val);
    }
}
int kthlarger(node *temp,int k){
     fl=INT_MIN;
    int factor=INT_MAX;
    for(int i=0;i<k;i++){
       ceilfloor(temp,factor);
       factor=fl;
       fl=INT_MIN;
    }
    return factor;
}

int main(){
   // vector<int> arr({10,20,50,-1,60,-1,-1,30,70,-1,80,110,-1,120,-1,-1,90,-1,-1,40,100,-1,-1});
  int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++)
    cin>>arr[i];
    int val;
    cin>>val;
    node* root = NULL;
    stack<node*> st;
    for(int i = 0; i < n; i++)
    {
        if(arr[i]==-1)
            st.pop();
        else{
            node* t = new node(arr[i]);
            if(st.size() != 0)
                st.top()->children.push_back(t);
            else
                root=t;
            st.push(t);
        }
    }
  
cout<<kthlarger(root,val)<<endl;

    
}
